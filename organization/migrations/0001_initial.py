# Generated by Django 4.1.2 on 2022-12-10 11:57

import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_editorjs_fields.fields
import mptt.fields
import sorl.thumbnail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('filer', '0015_alter_file_owner_alter_file_polymorphic_ctype_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Filial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Филиал',
                'verbose_name_plural': '2. Филиалы',
            },
        ),
        migrations.CreateModel(
            name='OrganizationConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.CharField(default='Название организации', max_length=255, verbose_name='Название организации')),
                ('logo', sorl.thumbnail.fields.ImageField(blank=True, null=True, upload_to='org', verbose_name='Логотип')),
                ('description', django_editorjs_fields.fields.EditorJsJSONField(blank=True, null=True, verbose_name='О компании')),
                ('default_img', sorl.thumbnail.fields.ImageField(blank=True, help_text='Изображение которое используется если у объекта оно не установлено', null=True, upload_to='org', verbose_name='Заглушка')),
                ('feedback_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Почта на которую отправлять обращения')),
                ('director_feedback_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Почта на которую отправлять обращения директору')),
                ('albums_folder', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='filer.folder', verbose_name='Папка для фотоальбомов')),
                ('knowledge_base', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='filer.folder', verbose_name='Папка для базы знаний')),
            ],
            options={
                'verbose_name': '1. Настройка',
            },
        ),
        migrations.CreateModel(
            name='PhraseDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Фраза')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Фраза дня',
                'verbose_name_plural': '4. Фразы дня',
            },
        ),
        migrations.CreateModel(
            name='PhraseForHomePage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phrases', to='organization.organizationconfig')),
                ('phrase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organization.phraseday', verbose_name='Фраза дня')),
            ],
            options={
                'verbose_name': 'Фраза дня',
                'verbose_name_plural': 'Фразы которые отображать на Главной Странице',
            },
        ),
        migrations.CreateModel(
            name='PhraseDayLikes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('phrase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='organization.phraseday')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='Название')),
                ('description', django_editorjs_fields.fields.EditorJsJSONField(blank=True, null=True, verbose_name='Описание')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('filial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departments', to='organization.filial', verbose_name='Филиал')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organization.department', verbose_name='Вышестоящий департамент')),
                ('supervisor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departments', to=settings.AUTH_USER_MODEL, verbose_name='Руководитель Департамента')),
            ],
            options={
                'verbose_name': 'Департамент',
                'verbose_name_plural': '3. Департаменты',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('ALL', 'Изображение + текст'), ('IMAGE', 'Только Изображение'), ('TEXT', 'Только Текст')], default='ALL', max_length=20, verbose_name='Тип баннера')),
                ('title', models.CharField(blank=True, help_text='Обязательно если выбран тип Изображение + текст или Текст', max_length=256, null=True, verbose_name='Заголовок')),
                ('description', models.TextField(blank=True, help_text='Обязательно если выбран тип Изображение + текст или Текст', null=True, verbose_name='Подробности')),
                ('link', models.URLField(blank=True, help_text='Укажите ссылку, если необходимо, в банере появится кнопка подробнее', null=True, verbose_name='Ссылка')),
                ('image', sorl.thumbnail.fields.ImageField(blank=True, help_text='Обязательно если указан тип Изображение + текст или Изображение', null=True, upload_to='banners', verbose_name='Изображение')),
                ('background_color', colorfield.fields.ColorField(blank=True, default='#f9f8f9', help_text='Выберите цвет, если указан тип - Текст', image_field=None, max_length=18, null=True, samples=None, verbose_name='Цвет фона')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок сортировки')),
                ('is_view', models.BooleanField(default=True, verbose_name='Отображать в слайдере?')),
                ('conf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banners', to='organization.organizationconfig')),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннера',
            },
        ),
    ]
